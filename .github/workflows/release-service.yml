name: Build and Release Service MSI

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-msi:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine version change
        id: version_check
        shell: pwsh
        working-directory: .
        run: |
          $ErrorActionPreference = 'Stop'
          $sha = $env:GITHUB_SHA
          $parentSha = git rev-parse "$sha^"
          $diff = git diff -U0 "$parentSha" "$sha" -- service/Cargo.toml 2>$null
          if (-not $diff) {
            echo "SHOULD_RELEASE=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "service/Cargo.toml not changed; skipping release."
            exit 0
          }
          $prevMatch = ($diff -split "`n") | Select-String '^-version\s*=\s*"([^"]+)"' | Select-Object -First 1
          $currMatch = ($diff -split "`n") | Select-String '^\+version\s*=\s*"([^"]+)"' | Select-Object -First 1
          $previous = if ($prevMatch) { $prevMatch.Matches[0].Groups[1].Value } else { $null }
          $current = if ($currMatch) { $currMatch.Matches[0].Groups[1].Value } else { $null }
          if (-not $current) {
            $m = Select-String -Path service/Cargo.toml -Pattern '^version\s*=\s*"([^"]+)"' | Select-Object -First 1
            if ($m) { $current = $m.Matches[0].Groups[1].Value }
          }
          $shouldRelease = ($previous -and $current -and ($current -ne $previous))
          echo "VERSION=$current" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SHOULD_RELEASE=$shouldRelease" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Current version: $current"
          Write-Host "Previous version: $previous"
          Write-Host "Should release: $shouldRelease"

      - name: Install Rust (stable)
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX Toolset
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: choco install wixtoolset --no-progress -y

      - name: Install cargo-wix
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: cargo install cargo-wix

      - name: Setup Node.js 20
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: npm ci
        working-directory: web

      - name: Build web (generate icons, openapi, dist)
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: npm run prebuild && npm run build
        env:
          GITHUB_PAGES: 'false'
          VITE_BASE: '/'
          VITE_API_BASE: ${{ secrets.VITE_API_BASE || vars.VITE_API_BASE }}
          VITE_INSTALLER_URL: ${{ secrets.VITE_INSTALLER_URL || vars.VITE_INSTALLER_URL }}
          VITE_CONTROL_TOKEN: ${{ secrets.VITE_CONTROL_TOKEN || vars.VITE_CONTROL_TOKEN }}
        working-directory: web

      - name: Build service (release)
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: cargo build --release

      - name: Build MSI with cargo-wix
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        env:
          FRAMEWORK_CONTROL_ALLOWED_ORIGINS: ${{ secrets.FRAMEWORK_CONTROL_ALLOWED_ORIGINS || vars.FRAMEWORK_CONTROL_ALLOWED_ORIGINS }}
          FRAMEWORK_CONTROL_TOKEN: ${{ secrets.FRAMEWORK_CONTROL_TOKEN || vars.FRAMEWORK_CONTROL_TOKEN }}
          FRAMEWORK_CONTROL_PORT: ${{ secrets.FRAMEWORK_CONTROL_PORT || vars.FRAMEWORK_CONTROL_PORT }}
          FRAMEWORK_CONTROL_UPDATE_REPO: ${{ secrets.FRAMEWORK_CONTROL_UPDATE_REPO || vars.FRAMEWORK_CONTROL_UPDATE_REPO }}
        run: |
          $ErrorActionPreference = 'Stop'
          # Substitute placeholders in the WinSW config before packaging
          $xml = Get-Content wix/FrameworkControlService.xml
          $xml = $xml -replace '@FRAMEWORK_CONTROL_ALLOWED_ORIGINS@', "$env:FRAMEWORK_CONTROL_ALLOWED_ORIGINS"
          $xml = $xml -replace '@FRAMEWORK_CONTROL_TOKEN@', "$env:FRAMEWORK_CONTROL_TOKEN"
          $xml = $xml -replace '@FRAMEWORK_CONTROL_PORT@', "$env:FRAMEWORK_CONTROL_PORT"
          $xml = $xml -replace '@FRAMEWORK_CONTROL_UPDATE_REPO@', "$env:FRAMEWORK_CONTROL_UPDATE_REPO"
          Set-Content wix/FrameworkControlService.xml $xml -Encoding UTF8
          cargo wix --nocapture -v

      - name: Locate MSI and read version
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $msi = Get-ChildItem -Path "target/wix" -Filter *.msi | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $msi) { throw "MSI not found in target/wix" }
          echo "MSI_PATH=$($msi.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "STABLE_NAME=framework-control-service-x86_64.msi" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create stable-named copy for upload
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $stable = Join-Path $env:RUNNER_TEMP $env:STABLE_NAME
          Copy-Item -Path "$env:MSI_PATH" -Destination "$stable" -Force
          echo "STABLE_PATH=$stable" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Generate SHA256
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $hash = (Get-FileHash "$env:MSI_PATH" -Algorithm SHA256).Hash
          $shaPath = "$env:RUNNER_TEMP/" + $env:STABLE_NAME + ".sha256"
          Set-Content -Path $shaPath -Value $hash -NoNewline
          echo "SHA_PATH=$shaPath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure gh CLI
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish versioned release for bumped version
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "$env:VERSION"
          $changelogPath = "../CHANGELOG.md"
          $defaultBody = "Refer to the CHANGELOG.md for information about version $env:VERSION."
          $body = $defaultBody
          if (Test-Path $changelogPath) {
            $lines = Get-Content $changelogPath
            $pattern = ('^##\s+' + [regex]::Escape($env:VERSION) + '(\s|$)')
            $match = ($lines | Select-String -Pattern $pattern | Select-Object -First 1)
            if ($match) {
              $startIndex = [int]$match.LineNumber - 1  # Convert to 0-based index
              $after = $lines[$startIndex..($lines.Length-1)]
              $headers = ($after | Select-String -Pattern '^##\s+' -AllMatches)
              if ($headers.Count -ge 2) {
                $endIndex = [int]$headers[1].LineNumber - 2
              } else {
                $endIndex = $after.Length - 1
              }
              if ($endIndex -ge 0) {
                $section = $after[0..$endIndex]
                $body = ($section -join "`n")
              }
            }
          }
          gh release view $tag 2>$null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag -t "Framework Service Installer" -n "$body" --latest
          } else {
            gh release edit $tag -t "Framework Service Installer" -n "$body" --latest
          }
          gh release upload $tag "$env:STABLE_PATH" --clobber
          gh release upload $tag "$env:SHA_PATH" --clobber
